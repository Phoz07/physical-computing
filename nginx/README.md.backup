# Nginx Reverse Proxy Configuration

This directory contains Nginx configuration for the Physical Computing application.

## Quick Start

The setup uses HTTP by default (no SSL configuration needed):

```bash
# Start all services
docker compose up -d

# Access the application
open http://localhost
```

## Configuration File

### `nginx.conf` (Active Configuration)

**Features**:

- Reverse proxy for backend (port 3001) and frontend (port 3000)
- Rate limiting for API endpoints (10 req/s API, 30 req/s general)
- Security headers (X-Frame-Options, CSP, etc.)
- Gzip compression for better performance
- Static file caching for uploads (30 days)
- Health check endpoint

**URL Routing**:

- `http://localhost/` → Frontend (Next.js)
- `http://localhost/api/*` → Backend API
- `http://localhost/logs` → Backend API
- `http://localhost/config` → Backend API
- `http://localhost/upload` → Backend API
- `http://localhost/uploads/*` → Backend static files

## Testing

### HTTP Setup

### Option 1: Using Let's Encrypt (Recommended)

1. **Obtain SSL certificates with Certbot:**

```bash
# Install certbot (on Ubuntu/Debian)
sudo apt-get update
sudo apt-get install certbot

# Stop nginx to allow certbot to bind to port 80
docker compose stop nginx

# Obtain certificates (replace yourdomain.com with your domain)
sudo certbot certonly --standalone \
  -d yourdomain.com \
  -d www.yourdomain.com \
  --email your-email@example.com \
  --agree-tos

# Certificates will be created in:
# /etc/letsencrypt/live/yourdomain.com/fullchain.pem
# /etc/letsencrypt/live/yourdomain.com/privkey.pem
```

2. **Copy certificates to the project:**

```bash
# Create ssl directory if not exists
mkdir -p nginx/ssl

# Copy certificates
sudo cp /etc/letsencrypt/live/yourdomain.com/fullchain.pem nginx/ssl/
sudo cp /etc/letsencrypt/live/yourdomain.com/privkey.pem nginx/ssl/

# Set permissions
sudo chmod 644 nginx/ssl/fullchain.pem
sudo chmod 600 nginx/ssl/privkey.pem
```

3. **Update SSL configuration:**

```bash
# Copy the template
cp nginx/ssl.conf.example nginx/ssl.conf

# Edit the configuration to replace placeholders
sed -i 's/yourdomain.com/your-actual-domain.com/g' nginx/ssl.conf
```

4. **Update docker-compose.yml to use SSL configuration:**

```yaml
# In docker-compose.yml, change the nginx volumes:
volumes:
  - ./nginx/ssl.conf:/etc/nginx/conf.d/default.conf:ro # Changed from nginx.conf
  - ./nginx/ssl:/etc/nginx/ssl:ro
  - nginx_cache:/var/cache/nginx
```

5. **Update environment variables:**

```bash
# In .env file, update URLs to use HTTPS
NEXT_PUBLIC_API_URL=https://yourdomain.com
NEXT_PUBLIC_BASE_URL=https://yourdomain.com
```

6. **Restart services:**

```bash
docker compose down
docker compose up -d
```

7. **Setup certificate renewal (Let's Encrypt certificates expire every 90 days):**

```bash
# Create a renewal script
sudo cat > /etc/cron.d/certbot-renew << 'EOF'
0 3 * * * root certbot renew --quiet --deploy-hook "cd /path/to/physical-computing && docker compose restart nginx"
EOF
```

### Option 2: Using Docker Certbot

Add Certbot service to docker-compose.yml:

```yaml
certbot:
  image: certbot/certbot
  container_name: physical-computing-certbot
  volumes:
    - ./nginx/ssl:/etc/letsencrypt
    - ./nginx/certbot:/var/www/certbot
  entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
```

Then obtain certificates:

```bash
# First-time certificate generation
docker compose run --rm certbot certonly \
  --webroot \
  --webroot-path=/var/www/certbot \
  --email your-email@example.com \
  --agree-tos \
  --no-eff-email \
  -d yourdomain.com \
  -d www.yourdomain.com
```

### Option 3: Self-Signed Certificates (Development/Testing Only)

```bash
# Generate self-signed certificate
cd nginx/ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout privkey.pem \
  -out fullchain.pem \
  -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

# Follow steps 3-6 from Option 1
```

**Note**: Self-signed certificates will show security warnings in browsers.

## Testing the Setup

### HTTP Setup

```bash
# Check nginx is running
docker compose ps nginx

# Test health endpoint
curl http://localhost/health

# Test frontend
curl -I http://localhost/

# Test backend API
curl http://localhost/api/status
```

### HTTPS Setup

```bash
# Test SSL certificate
openssl s_client -connect yourdomain.com:443 -servername yourdomain.com

# Test HTTPS redirect
curl -I http://yourdomain.com/

# Test HTTPS access
curl -I https://yourdomain.com/
```

## Rate Limiting

Nginx is configured with rate limiting to prevent abuse:

- **API endpoints** (`/api/*`): 10 requests/second per IP (burst: 20)
- **General endpoints**: 30 requests/second per IP (burst: 50)

If you need to adjust these limits, edit the configuration file:

```nginx
# In nginx.conf or ssl.conf
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;
```

## Security Headers

Both configurations include security headers:

- `X-Frame-Options: DENY` - Prevent clickjacking
- `X-Content-Type-Options: nosniff` - Prevent MIME-type sniffing
- `X-XSS-Protection: 1; mode=block` - Enable XSS protection
- `Referrer-Policy: strict-origin-when-cross-origin` - Control referrer information
- `Content-Security-Policy` (HTTPS only) - Restrict resource loading

## Troubleshooting

### Nginx fails to start

```bash
# Check nginx configuration syntax
docker compose exec nginx nginx -t

# Check nginx logs
docker compose logs nginx

# Check if ports are already in use
sudo lsof -i :80
sudo lsof -i :443
```

### 502 Bad Gateway

This usually means nginx can't reach the backend or frontend:

```bash
# Check if backend and frontend are running
docker compose ps backend frontend

# Check backend health
docker compose exec backend curl http://localhost:3001/api/status

# Check frontend health
docker compose exec frontend curl http://localhost:3000

# Check network connectivity
docker compose exec nginx ping backend
docker compose exec nginx ping frontend
```

### Rate limiting too strict

If legitimate users are being rate-limited:

```bash
# Increase the rate limit in nginx.conf or ssl.conf
# For example, change rate=10r/s to rate=50r/s

# Reload nginx
docker compose exec nginx nginx -s reload
```

### SSL certificate errors

```bash
# Verify certificate files exist and are readable
ls -la nginx/ssl/

# Check certificate validity
openssl x509 -in nginx/ssl/fullchain.pem -text -noout

# Check certificate expiration
openssl x509 -in nginx/ssl/fullchain.pem -noout -dates
```

## Performance Tuning

### Enable HTTP/2 (HTTPS only)

Already enabled in `ssl.conf.example`:

```nginx
listen 443 ssl http2;
```

### Adjust worker processes

Add to the top of nginx.conf or ssl.conf:

```nginx
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
}
```

### Increase cache size

```nginx
# Adjust cache zone size
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:100m max_size=1g inactive=60m;
```

## Monitoring

### Check nginx status

```bash
# View active connections
docker compose exec nginx cat /var/run/nginx.pid | xargs ps -p

# Check error log
docker compose logs nginx --tail=100 -f

# Monitor access logs
docker compose exec nginx tail -f /var/log/nginx/access.log
```

### Health checks

The nginx service includes health checks in docker-compose.yml:

- Interval: 30 seconds
- Timeout: 10 seconds
- Retries: 3

Check health status:

```bash
docker compose ps nginx
```

## Directory Structure

```
nginx/
├── README.md           # This file
├── nginx.conf          # HTTP configuration (active)
├── ssl.conf.example    # HTTPS template
└── ssl/                # SSL certificates directory
    ├── fullchain.pem   # Public certificate (not in git)
    └── privkey.pem     # Private key (not in git)
```

## Additional Resources

- [Nginx Documentation](https://nginx.org/en/docs/)
- [Let's Encrypt Documentation](https://letsencrypt.org/docs/)
- [Mozilla SSL Configuration Generator](https://ssl-config.mozilla.org/)
- [Security Headers Best Practices](https://securityheaders.com/)
