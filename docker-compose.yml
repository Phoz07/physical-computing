services:
  # Backend (Elysia)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: physical-computing-backend
    restart: unless-stopped
    environment:
      # Use external PostgreSQL (from host or remote server)
      DATABASE_URL: ${DATABASE_URL}
      PORT: 3001
      NODE_ENV: production
    volumes:
      - ./uploads:/app/uploads
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    expose:
      - "3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: physical-computing-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost}
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost}
    depends_on:
      - backend
    networks:
      - app-network
    expose:
      - "3000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: physical-computing-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx-subdomain.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  nginx_cache:
    driver: local
