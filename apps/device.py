#!/usr/bin/env python3
"""
Camera Web Streaming with Helmet Detection - FastAPI
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö helmet ‡∏î‡πâ‡∏ß‡∏¢ YOLO
- ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° servo
- ‡πÅ‡∏™‡∏î‡∏á live stream ‡∏ú‡πà‡∏≤‡∏ô /stream.mjpg
‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://<Pi-IP>:8000/stream.mjpg
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from picamera2 import Picamera2
from datetime import datetime
from ultralytics import YOLO
from gpiozero import Servo
from gpiozero.pins.lgpio import LGPIOFactory
from threading import Thread, Lock
import cv2
import time
import uvicorn
import requests
import io

# Configuration
MODEL_PATH = "helmet.pt"
CONF = 0.35 
IMGSZ = 320
SERVO_PIN = 18
SERVER_URL = "http://192.168.1.186:3001"  # Backend API URL (port 3001)

# Setup servo
factory = LGPIOFactory()
servo = Servo(
    SERVO_PIN, 
    min_pulse_width=0.5/1000, 
    max_pulse_width=2.5/1000, 
    pin_factory=factory
)

# FastAPI app
app = FastAPI(title="Helmet Detection Stream")

# ‡πÄ‡∏õ‡∏¥‡∏î CORS ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å origin
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin
    allow_credentials=True,
    allow_methods=["*"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å HTTP methods (GET, POST, etc.)
    allow_headers=["*"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å headers
)

# Global variables
is_servo_open = False
has_helmet_detected = False
manual_mode = False  # ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏≠‡∏á
model = None
picam2 = None
current_frame = None
frame_lock = Lock()

# Pydantic model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request body
class GateControl(BaseModel):
    action: str  # "open" ‡∏´‡∏£‡∏∑‡∏≠ "close"

def set_angle(angle):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏∏‡∏° 0-180¬∞ ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ servo -1 ‡∏ñ‡∏∂‡∏á +1"""
    value = (angle / 90.0) - 1.0
    value = max(-1, min(1, value))
    servo.value = value
    print(f"üîß Servo: {angle}¬∞ (value={value:.2f})")
    time.sleep(0.5)
    servo.value = None

def get_ip():
    import socket
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "localhost"

def upload_image(frame):
    """Upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà server ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL"""
    try:
        # Convert frame ‡πÄ‡∏õ‡πá‡∏ô JPEG
        ret, jpeg = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 90])
        if not ret:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ encode ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
            return None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á file object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upload
        files = {
            'file': ('image.jpg', io.BytesIO(jpeg.tobytes()), 'image/jpeg')
        }
        
        # POST ‡πÑ‡∏õ‡∏ó‡∏µ‡πà server
        response = requests.post(f"{SERVER_URL}/upload", files=files, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            image_url = data.get('url') or data.get('image_url') or data.get('file_url')
            print(f"‚úÖ Upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {image_url}")
            return image_url
        else:
            print(f"‚ùå Upload ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error uploading image: {e}")
        return None

def send_log(image_url, is_open):
    """‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏ó‡∏µ‡πà server"""
    try:
        data = {
            "image": image_url,
            "isOpen": is_open
        }
        
        response = requests.post(
            f"{SERVER_URL}/logs",
            json=data,
            timeout=5,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200 or response.status_code == 201:
            print(f"‚úÖ ‡∏™‡πà‡∏á log ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: isOpen={is_open}")
            return True
        else:
            print(f"‚ùå ‡∏™‡πà‡∏á log ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error sending log: {e}")
        return False

def detection_thread():
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö helmet"""
    global is_servo_open, has_helmet_detected, model, picam2, current_frame
    
    print("üì¶ Loading YOLO model...")
    model = YOLO(MODEL_PATH)
    names = {i: n.lower() for i, n in model.names.items()}
    print(f"‚úÖ Model loaded. Classes: {list(names.values())}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô servo
    set_angle(0)
    
    while True:
        try:
            # Capture frame
            frame = picam2.capture_array()
            
            # Resize ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detection
            small = cv2.resize(frame, (IMGSZ, IMGSZ), interpolation=cv2.INTER_AREA)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö helmet
            res = model.predict(
                source=small, 
                imgsz=IMGSZ, 
                conf=CONF, 
                verbose=False, 
                device="cpu"
            )[0]
            
            has_helmet = any(names.get(int(b.cls), "") == "helmet" for b in res.boxes)
            has_helmet_detected = has_helmet
            
            # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° servo ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô manual mode
            if not manual_mode:
                if has_helmet and not is_servo_open:
                    is_servo_open = True
                    set_angle(90)
                    
                    # üî• ‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏ó‡∏µ‡πà server (‡∏ó‡∏≥‡πÉ‡∏ô background thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ blocking)
                    def send_event():
                        try:
                            print("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á event ‡πÑ‡∏õ‡∏ó‡∏µ‡πà server...")
                            image_url = upload_image(frame.copy())
                            if image_url:
                                send_log(image_url, True)
                        except Exception as e:
                            print(f"‚ùå Error sending event: {e}")
                    
                    Thread(target=send_event, daemon=True).start()
                    time.sleep(3)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    
                elif not has_helmet and is_servo_open:
                    is_servo_open = False
                    set_angle(0)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cv2.putText(frame, timestamp, (10, 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ helmet
            status_text = f"HELMET={str(has_helmet).upper()}  (conf>={CONF})"
            color = (0, 200, 0) if has_helmet else (0, 0, 255)
            cv2.putText(frame, status_text, (10, 70),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ gate
            gate_status = "OPEN" if is_servo_open else "CLOSED"
            gate_color = (0, 255, 0) if is_servo_open else (0, 0, 255)
            cv2.putText(frame, f"GATE: {gate_status}", (10, 110),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.9, gate_color, 2)
            
            # Convert frame to JPEG ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô global variable
            ret, jpeg = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
            if ret:
                with frame_lock:
                    current_frame = jpeg.tobytes()
            
            time.sleep(0.1)  # ‡∏•‡∏î CPU usage
            
        except Exception as e:
            print(f"‚ùå Error in detection thread: {e}")
            time.sleep(1)

def generate_frames():
    """Generator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stream MJPEG"""
    while True:
        with frame_lock:
            if current_frame is None:
                time.sleep(0.1)
                continue
            frame = current_frame
        
        yield (b'--FRAME\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
        time.sleep(0.033)  # ~30 FPS

@app.get("/stream.mjpg")
async def stream():
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MJPEG stream"""
    return StreamingResponse(
        generate_frames(),
        media_type="multipart/x-mixed-replace; boundary=FRAME"
    )

@app.get("/status")
async def get_status():
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    return {
        "is_online": picam2 is not None and picam2.started,
        "gate_status": "open" if is_servo_open else "closed",
        "model_loaded": model is not None,
        "manual_mode": manual_mode,
        "confidence_threshold": CONF
    }

@app.post("/gate")
async def control_gate(gate: GateControl):
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° gate ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"""
    global is_servo_open, manual_mode
    
    if gate.action.lower() == "open":
        manual_mode = True
        is_servo_open = True
        set_angle(90)
        return {
            "success": True,
            "message": "Gate opened",
            "gate_status": "open",
            "manual_mode": True
        }
    elif gate.action.lower() == "close":
        manual_mode = False
        is_servo_open = False
        set_angle(0)
        return {
            "success": True,
            "message": "Gate closed",
            "gate_status": "closed",
            "manual_mode": False
        }
    else:
        return {
            "success": False,
            "message": "Invalid action. Use 'open' or 'close'",
            "gate_status": "open" if is_servo_open else "closed"
        }

@app.on_event("startup")
async def startup_event():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô camera ‡πÅ‡∏•‡∏∞ detection thread ‡πÄ‡∏°‡∏∑‡πà‡∏≠ app ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    global picam2
    
    print("üì∑ Starting camera...")
    picam2 = Picamera2()
    config = picam2.create_preview_configuration(
        main={"size": (1280, 720), "format": "RGB888"}
    )
    picam2.configure(config)
    picam2.start()
    print("‚úÖ Camera ready")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° detection thread
    detect_thread = Thread(target=detection_thread, daemon=True)
    detect_thread.start()
    
    ip = get_ip()
    print("=" * 60)
    print("üöÄ FastAPI Helmet Detection Server")
    print("=" * 60)
    print(f"‚úÖ Stream URL: http://{ip}:8000/stream.mjpg")
    print(f"‚úÖ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ: http://localhost:8000/stream.mjpg")
    print("=" * 60)

@app.on_event("shutdown")
async def shutdown_event():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î app"""
    print("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î...")
    try:
        if picam2:
            picam2.stop()
    except:
        pass
    set_angle(0)
    print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏£‡∏±‡∏ô FastAPI server ‡∏î‡πâ‡∏ß‡∏¢ uvicorn"""
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

if __name__ == '__main__':
    main()

